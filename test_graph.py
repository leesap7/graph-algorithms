from graph import Graph

def main():
    test_graph_print()
    test_graph_num_vertices()
    test_graph_num_edges()
    test_graph_contains_edge()

def test_graph_print():
    graph = Graph(5)
    graph.add_edge(2, 3, 5)
    graph.print_graph()
    graph.rmv_edge(2, 3)
    print()
    graph.print_graph()
    print()

    graph = Graph(8)
    graph.add_edge(0, 1, 8)
    graph.add_edge(0, 3, 2)
    graph.add_edge(2, 3, 1)
    graph.add_edge(2, 5, 6)
    graph.add_edge(1, 2, 3)
    graph.add_edge(2, 1, 3)
    graph.add_edge(3, 6, 7)
    graph.add_edge(4, 7, 22)
    graph.add_edge(4, 0, 9)
    graph.add_edge(5, 3, 19)
    graph.add_edge(6, 7, 12)
    graph.add_edge(6, 2, 11)
    graph.add_edge(7, 2, 11)
    graph.add_edge(7, 0, 133)
    graph.add_edge(7, 5, 22)
    graph.add_edge(4, 7, 12)
    graph.add_edge(8, 2, 11)
    graph.print_graph()
    print()
    graph.rmv_edge(4, 7)
    graph.rmv_edge(7, 4)
    graph.rmv_edge(3, 6)
    graph.rmv_edge(4, 1)
    graph.print_graph()
    print()

    graph = Graph(10)
    graph.print_graph()
    print()
    graph.rmv_edge(9, 1)
    graph.print_graph()
    print()
    graph.add_edge(1, 33, 2)
    graph.print_graph()
    print()

    graph = Graph(0)
    graph.print_graph()
    print()

    graph = Graph(1)
    graph.print_graph()

def test_graph_num_vertices():
    graph = Graph(5)
    assert(graph.nV == 5)
    graph.add_edge(2, 3, 5)
    assert(graph.nV == 5)
    graph.rmv_edge(2, 3)
    assert(graph.nV == 5)

    graph = Graph(8)
    assert(graph.nV == 8)

    for i in range(20):
        graph = Graph(i)
        assert(graph.nV == i)

def test_graph_num_edges():
    graph = Graph(5)
    assert(graph.nE == 0)
    graph.add_edge(2, 3, 5)
    assert(graph.nE == 1)
    graph.rmv_edge(2, 3)
    assert(graph.nE == 0)

    graph = Graph(8)
    assert(graph.nE == 0)
    graph.add_edge(0, 1, 8)
    graph.add_edge(0, 3, 2)
    graph.add_edge(2, 3, 1)
    graph.add_edge(2, 5, 6)
    assert(graph.nE == 4)
    graph.add_edge(1, 2, 3)
    graph.add_edge(2, 1, 3)
    graph.add_edge(3, 6, 7)
    assert(graph.nE == 7)
    graph.add_edge(4, 7, 22)
    graph.add_edge(4, 0, 9)
    assert(graph.nE == 9)
    graph.add_edge(5, 3, 19)
    graph.add_edge(6, 7, 12)
    graph.add_edge(6, 2, 11)
    assert(graph.nE == 12)
    graph.add_edge(7, 2, 11)
    graph.add_edge(7, 0, 133)
    graph.add_edge(7, 5, 22)
    assert(graph.nE == 15)
    graph.add_edge(4, 7, 12)
    assert(graph.nE == 15)
    graph.rmv_edge(4, 7)
    graph.rmv_edge(7, 4)
    assert(graph.nE == 14)
    graph.rmv_edge(3, 6)
    assert(graph.nE == 13)
    graph.rmv_edge(4, 1)
    assert(graph.nE == 13)

def test_graph_contains_edge():
    graph = Graph(5)
    graph.add_edge(2, 3, 5)
    assert(graph.contains_edge(2, 3) == True)
    assert(graph.contains_edge(3, 2) == False)
    graph.rmv_edge(2, 3)
    assert(graph.contains_edge(2, 3) == False)
    assert(graph.contains_edge(3, 2) == False)

    graph = Graph(8)
    graph.add_edge(0, 1, 8)
    graph.add_edge(0, 3, 2)
    graph.add_edge(2, 3, 1)
    graph.add_edge(2, 5, 6)
    graph.add_edge(1, 2, 3)
    graph.add_edge(2, 1, 3)
    graph.add_edge(3, 6, 7)
    graph.add_edge(4, 7, 22)
    graph.add_edge(4, 0, 9)
    graph.add_edge(5, 3, 19)
    graph.add_edge(6, 7, 12)
    graph.add_edge(6, 2, 11)
    graph.add_edge(7, 2, 11)
    graph.add_edge(7, 0, 133)
    graph.add_edge(7, 5, 22)
    graph.add_edge(4, 7, 12)
    assert(graph.contains_edge(3, 2) == False)
    assert(graph.contains_edge(2, 3) == True)
    assert(graph.contains_edge(0, 1) == True)
    assert(graph.contains_edge(1, 0) == False)
    assert(graph.contains_edge(0, 7) == False)
    assert(graph.contains_edge(7, 0) == True)
    assert(graph.contains_edge(2, 1) == True)
    assert(graph.contains_edge(5, 3) == True)
    graph.rmv_edge(4, 7)
    graph.rmv_edge(7, 4)
    graph.rmv_edge(3, 6)
    assert(graph.contains_edge(4, 1) == False)
    graph.rmv_edge(4, 1)
    assert(graph.contains_edge(4, 7) == False)
    assert(graph.contains_edge(7, 4) == False)
    assert(graph.contains_edge(3, 6) == False)
    assert(graph.contains_edge(4, 1) == False)

if __name__ == "__main__":
    main()